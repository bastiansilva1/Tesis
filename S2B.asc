######### STRA2BIS TRANSFORMATIONS %%%%%%%%

###SET WORK CONTEXT: LiteStrat Model ########

SEND "GET_ACTIVE_MODEL" to:"Modeling" answer:modelid
IF (modelid = "")
{
   CC "AdoScript" ERRORBOX "Open a model first!"
   EXIT
}

#Set LiteStrat model as the model under analysis
SET sCurrentModelId:(modelid)

CC "Modeling" GET_ACT_MODEL
CC "Core" GET_MODEL_MODELTYPE modelid:(modelid)

IF ((modeltype) != "LiteStrat") { 
    CC "AdoScript" INFOBOX "Please open a LiteStrat model to apply the transformation."
    BREAK
}


#Get the list of organisational units inside the organisation.
GET_INTERNAL_OUS iLiteStratModelId:(VAL sCurrentModelId) result:sInternalOUS

IF(sInternalOUS <> "") {
    #1. Init vars for creating models (just the first time)         
    #select root model
    CC "CoreUI" MODEL_SELECT_BOX boxtext:"Please select the root model group:" without-models mgroup-sel title:"Stra2Bis Transformation"
    SET rootModelGroupId:(VAL mgroupids)
        
    #Get timestamp for naming models
    CC "Application"  GET_DATE_TIME date-format:"DD.MM.YYYY" time-format:"HH:MM:SS"
    SET newModelTimeStamp:(date+time)

    #2. Init Traceability modelgroup and model
    #SET sTraceModelId:0
    #CREATE_STOB_TRACE_MODEL mgroupids:(rootModelGroupId) result:sTraceModelId
    

    #3. Init Business Process Model Group
    CREATE_BP_MODELGROUP mgroupids:(rootModelGroupId) result:sBPModelGroupId
    
    
    # 3. Apply Guideline 1 For each Internal organisation Unit:

    FOR organisationUnitId_i in:(sInternalOUS) {
        IF (organisationUnitId_i != "") {
            TRANSFORM_OUS pOUid:(VAL organisationUnitId_i) pBPModelGroupId:(sBPModelGroupId) result:newCAModel_i
        }
    }

    # 3. Apply Guideline 2 For each dependency between internal organisation units:
    FOR organisationUnitId_i in:(sInternalOUS) {
        IF (organisationUnitId_i != "") {
            TRANSFORM_DEPENDENCIES pOUid:(VAL organisationUnitId_i) pBPModelGroupId:(sBPModelGroupId) result:newCAModel_i
        }
    }

    # 3. Apply Guideline 3 For each objective inside internal organisation units:
    FOR organisationUnitId_i in:(sInternalOUS) {
        IF (organisationUnitId_i != "") {
            TRANSFORM_OBJECTIVES pOUid:(VAL organisationUnitId_i) pBPModelGroupId:(sBPModelGroupId) result:newCAModel_i
        }
    }

    CC "Modeling" OPEN modelids:(sCurrentModelId)
    CC "Modeling" ACTIVATE_MODEL (sCurrentModelId)
}


CC "Application" SET_STATUS ("Stra2Bis Transformation Finished ")

#### PRPOCEDURES

PROCEDURE GET_INTERNAL_OUS iLiteStratModelId:integer result: reference {
    SET aInternalOUs:""

    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(iLiteStratModelId) classname:"OrganizationalUnit"

    FOR organisationUnitId_i in:(objids) {

        #Get Organisation Unit's parent
        CC "Core" GET_ATTR_VAL objid:(VAL organisationUnitId_i) attrname:"Name" as-string
        SET sUnitName:(val)

        CC "AQL" EVAL_AQL_EXPRESSION expr:("({\"" + sUnitName + "\":\"OrganizationalUnit\"}->\"Is inside\")") modelid:(VAL sCurrentModelId)
        SET tOrgUnitParOids:(objids)

        SET nParentUnits:0
        
        FOR orgUnitOids in:(tOrgUnitParOids) {
            #get Parent's classname
            CC "Core" GET_CLASS_ID objid:(VAL orgUnitOids)
            SET sOUClassId:(classid)
            
            CC "Core" GET_CLASS_NAME classid:(sOUClassId)
            SET orgUnitParentClassName:(classname)
            IF (orgUnitParentClassName = "OrganizationalUnit") {
                SET nParentUnits:(nParentUnits + 1) 
            }
        }
 
        IF (nParentUnits > 0) {
            ##Add to array of internal Organisation Units
            SET aInternalOUs:(aInternalOUs + organisationUnitId_i + " ")
        }
    }
    SET result:(aInternalOUs)   
}

PROCEDURE CREATE_STOB_TRACE_MODEL mgroupids: integer result: reference {
# 2. IF there are "internal" organization units, create the Traceability Model    
            CC "Core" CREATE_MODELGROUP supermgroupid:(mgroupids) mgroupname:"S2B Trace" result:(traceModelGroupId)
        
            #ECODE = 52: Model already exists.    
            IF (ecode != 0 AND ecode != 52)
            {
                CC "AdoScript" INFOBOX "Error!\nModelgroup could not be created. Was the name you entered unique?"
            } 
            #Create Traceability Model
            CC "Core" CREATE_MODEL  modeltype:"Stra2Bis Traceability" modelname:("S2BTrace-"+newModelTimeStamp) version:"1.0" mgroups:(traceModelGroupId)             
            SET result:(modelid)
            
}

PROCEDURE CREATE_BP_MODELGROUP mgroupids:integer result:reference {

    CC "Core" CREATE_MODELGROUP supermgroupid:(mgroupids) mgroupname:"Business Process"
    SET temp:(mgroupid)

    #ECODE = 52: Model already exists.    

    IF (ecode != 0 AND ecode != 52) {
        CC "AdoScript" INFOBOX "Error!\nModelgroup could not be created. Was the name you entered unique?"
    } 

    SET result:(temp)
    

}

###GUIDELINE 1 ########
PROCEDURE TRANSFORM_OUS pOUid:integer pBPModelGroupId:integer result:reference {

#   3.1 Create a target Communication Analysis Diagram CAModel_i  
        CC "Core" GET_ATTR_VAL objid:(pOUid) attrname:"Name" as-string
        SET iUnitName:(val)
        
        #CC "Core" CREATE_MODEL  modeltype:"Communication Analysis" modelname:(iUnitName+" Process "+newModelTimeStamp) version:"1.0" mgroups:(pBPModelGroupId)             
        CC "Core" CREATE_MODEL  modeltype:"Communication Analysis" modelname:(iUnitName+" Process") version:"1.0" mgroups:(pBPModelGroupId)             
        SET newCAModel_i:(modelid)
        
#   3.2 Create a start node in CAModel_i.StartNode_ with the nam Organisation Unit.Name + Process
        
        CC "Modeling" OPEN modelids:(newCAModel_i)
        CC "Modeling" ACTIVATE_MODEL (newCAModel_i)
        
        CC "Core" GET_CLASS_ID classname:"CAStart"
        SET sStartNodeClassId:(classid)

        CC "Core" CREATE_OBJ modelid:(newCAModel_i) classid:(sStartNodeClassId) objname:(iUnitName+" Process")
        SET sStartNodeId:(objid)

        CC "Modeling" SET_OBJ_POS objid:(sStartNodeId) x:(10.5cm) y:(1.5cm)
        CC "Modeling" REBUILD_DRAWING_AREA

#   3.3 Reference Start Node's owner Unit

        #Add to the processes owned by the unit:
        CC "Core" GET_ATTR_ID classid:(sStartNodeClassId) attrname:"Owner Unit"
        CC "Core" ADD_INTERREF objid:(sStartNodeId) attrid:(attrid) tobjid:(pOUid) tmodelid:(sCurrentModelId)

#   3.4 Reference Unit's processes (start nod)

        CC "Modeling"  ACTIVATE_MODEL (sCurrentModelId)
        
        CC "Core" GET_CLASS_ID objid:(pOUid)

        

        #Add interref as the traced BP owned by the OU (read only, just one process)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Traced Business Process"
        SET traceAttrid:(attrid)
        CC "Core" REMOVE_ALL_INTERREFS objid:(pOUid) attrid:(traceAttrid)
        CC "Core" ADD_INTERREF objid:(pOUid) attrid:(traceAttrid) tobjid:(sStartNodeId) tmodelid:(newCAModel_i)
        
        #Add interref as a BP owned by the OU
        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Business Processes"
        CC "Core" ADD_INTERREF objid:(pOUid) attrid:(attrid) tobjid:(sStartNodeId) tmodelid:(newCAModel_i)

        SET result:(newCAModel_i)
}  
    
###GUIDELINE 2 ########
PROCEDURE TRANSFORM_DEPENDENCIES pOUid:integer pBPModelGroupId:integer result:reference {

    #Get the influence connectors for the internal OUs where OU is source
    CC "Core" GET_CONNECTORS objid:(pOUid) out
    SET sOutInfluence:(objids)

    FOR influence_i in:(sOutInfluence) {

        #Get spurce OU name
        CC "Core" GET_ATTR_VAL objid:(pOUid) attrname:"Name" as-string
        SET sSourceOUName:(val)
        
        #get connector class
        CC "Core" GET_CLASS_ID objid:(VAL influence_i)
        CC "Core" GET_CLASS_NAME classid:(classid)
        SET connClassName:(classname)
        
        #if  connector class is influence
        IF (connClassName = "Influence") {

            #POSITION COMSTANTs
            SET ypos:(15cm)
            
            #Get influence name 
            CC "Core" GET_ATTR_VAL objid:(VAL influence_i) attrname:"Name" as-string
            SET sInfluenceName:(val)

            # Get target organisation unit
            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL influence_i)
            SET iTargetOUid:(toobjid)
            
            #Target OU name
            CC "Core"  GET_ATTR_VAL objid:(iTargetOUid) attrname:"Name" as-string
            SET iTargetOUName:(val)

            #CC "AdoScript" INFOBOX ("FROM: " + (sSourceOUName) + " THROUGH: " + sInfluenceName + " TO: " + iTargetOUName)

            #In the BP model of the source OU, create an event, a  secondary actor, an outgoing interaction.
            
            ################################################
            ##CREATE ELEMENTS IN THE SOURCE OU BP MODEL#####
            ################################################
            
            ### Get the Traced BP's of the source OU
            CC "Core" GET_INTERREF  objid:(pOUid ) attrname:"Traced Business Process" index:0
            SET sOUBPModelId:(tmodelid)
            #CC "AdoScript" INFOBOX ("sOUBPModelId" + (STR sOUBPModelId))
            CC "Modeling" ACTIVATE_MODEL (sOUBPModelId)

            ### Create the communicative event
            CC "Core" GET_CLASS_ID classname:"CommunicativeEvent"
            SET sCANodeClassId:(classid)
            CC "Core" CREATE_OBJ modelid:(sOUBPModelId) classid:(sCANodeClassId) objname:("Dispatch " + (sInfluenceName))
            SET sNewCEid:(objid)
            
            IF (ecode != 0 AND ecode != 52)
                {
                    CC "AdoScript" INFOBOX "Error!\nModelgroup could not be created. Was the name you entered unique?"
                } 

            CC "Modeling" SET_OBJ_POS objid:(sNewCEid) x:(10.5cm) y:(ypos)
            CC "Core" SET_ATTR_VAL objid:(sNewCEid) attrname:"Code" val:("S2B-G2") ###S2B-GL2 ->"Generated by Stra2Bis transformaiton Guideline 2"
            
            
            ### Create the receiver actor
            CC "Core" GET_CLASS_ID classname:"CAActor"
            SET sActorClassId:(classid)
            CC "Core" CREATE_OBJ modelid:(sOUBPModelId) classid:(sActorClassId) objname:((iTargetOUName)+ " Agent")
            SET sNewActorid:(objid)
            CC "Modeling" SET_OBJ_POS objid:(sNewActorid) x:(20cm) y:(ypos)

            ##### Receiver actor is the support actor of the CE
            CC "Core" GET_ATTR_ID classid:(sCANodeClassId) attrname:"SupportActor"
            CC "Core" ADD_INTERREF objid:(sNewCEid) attrid:(attrid) tobjid:(sNewActorid) tmodelid:(sCurrentModelId)

            ### Create the outgoing communicative event
            CC "Core" GET_CLASS_ID classname:"OutgoingInteraction"
            SET sOutgoingClassId:(classid)
            CC "Core" CREATE_CONNECTOR modelid:(sOUBPModelId) fromobjid:(sNewCEid) toobjid:(sNewActorid) classid:(sOutgoingClassId)
            SET sOutgoingId:(objid)
            CC "Core" SET_ATTR_VAL objid:(sOutgoingId) attrname:"Name" val:(sInfluenceName)
            
            #CC "Modeling" SET_OBJ_POS objid:(sNewActorid) x:(13cm) y:(10.5cm)
            
            CC "Modeling" REBUILD_DRAWING_AREA
            
        


            ### Traceability
            #### Add the CEvent to the out dependencies of the source OU
            CC "Core" GET_CLASS_ID objid:(pOUid)
            CC "Core" GET_ATTR_ID classid:(classid) attrname:"Out Dependencies Events"
            CC "Core" ADD_INTERREF objid:(pOUid) attrid:(attrid) tobjid:(sNewCEid) tmodelid:(sCurrentModelId)

            #### Add for the CA Actor and their Organisatoin units
            CC "Core" GET_ATTR_ID classid:(sActorClassId) attrname:"Traced Organisation Unit in Dependency"
            CC "Core" ADD_INTERREF objid:(sNewActorid) attrid:(attrid) tobjid:(iTargetOUid) tmodelid:(sCurrentModelId)

            ################################################
            ##CREATE ELEMENTS IN THE TARGET OU BP MODEL#####
            ################################################
            
            ### Get the Traced BP's of the targhet OU
            CC "Core" GET_INTERREF  objid:(iTargetOUid) attrname:"Traced Business Process" index:0
            SET tOUBPModelId:(tmodelid)
            CC "Modeling" ACTIVATE_MODEL (tOUBPModelId)

            ### Create the communicative event
            CC "Core" GET_CLASS_ID classname:"CommunicativeEvent"
            SET sCANodeClassId:(classid)
            CC "Core" CREATE_OBJ modelid:(tOUBPModelId) classid:(sCANodeClassId) objname:("Receive " + (sInfluenceName))
            SET sNewCEid:(objid)
            
            IF (ecode != 0 AND ecode != 52)
                {
                    CC "AdoScript" INFOBOX "Error!\nModelgroup could not be created. Was the name you entered unique?"
                } 

            CC "Modeling" SET_OBJ_POS objid:(sNewCEid) x:(10.5cm) y:(ypos)
            CC "Core" SET_ATTR_VAL objid:(sNewCEid) attrname:"Code" val:("S2B-G2") ###S2B-GL2 ->"Generated by Stra2Bis transformaiton Guideline 2"

            ### Create the primary actor
            CC "Core" GET_CLASS_ID classname:"CAActor"
            SET sActorClassId:(classid)
            CC "Core" CREATE_OBJ modelid:(tOUBPModelId) classid:(sActorClassId) objname:((sSourceOUName)+ " Agent")
            SET sNewActorid:(objid)
            CC "Modeling" SET_OBJ_POS objid:(sNewActorid) x:(2cm) y:(ypos)

            ##### Primary actor is the support actor of the CE
            CC "Core" GET_ATTR_ID classid:(sCANodeClassId) attrname:"SupportActor"
            CC "Core" ADD_INTERREF objid:(sNewCEid) attrid:(attrid) tobjid:(sNewActorid) tmodelid:(tOUBPModelId)

            ### Create the ingoing communicative interaction
            CC "Core" GET_CLASS_ID classname:"IngoingInteraction"
            SET sIngoingingClassId:(classid)
            CC "Core" CREATE_CONNECTOR modelid:(tOUBPModelId) fromobjid:(sNewActorid) toobjid:(sNewCEid) classid:(sIngoingingClassId)
            SET sIngoingId:(objid)
            CC "Core" SET_ATTR_VAL objid:(sIngoingId) attrname:"Name" val:(sInfluenceName)

            CC "Modeling" REBUILD_DRAWING_AREA
            
            ### Traceability
            #### Add the CEvent to the in dependencies of the target OU
            CC "Core" GET_CLASS_ID objid:(iTargetOUid)
            CC "Core" GET_ATTR_ID classid:(classid) attrname:"In Dependencies Events"
            CC "Core" ADD_INTERREF objid:(iTargetOUid) attrid:(attrid) tobjid:(sNewCEid) tmodelid:(sCurrentModelId)


            CC "Core" GET_CLASS_ID objid:(iTargetOUid)
            CC "Core" GET_ATTR_ID classid:(classid) attrname:"In Dependencies Events"
            CC "Core" ADD_INTERREF objid:(iTargetOUid) attrid:(attrid) tobjid:(sNewCEid) tmodelid:(sCurrentModelId)


            #### Add for the CA Actor and their Organisatoin units
            CC "Core" GET_ATTR_ID classid:(sActorClassId) attrname:"Traced Organisation Unit in Dependency"
            CC "Core" ADD_INTERREF objid:(sNewActorid) attrid:(attrid) tobjid:(pOUid) tmodelid:(sCurrentModelId)

        }

    }

    SET result:0
}

###GUIDELINE 3 ########
PROCEDURE TRANSFORM_OBJECTIVES pOUid:integer pBPModelGroupId:integer result:reference {

 ## Check if the OU has elements inside
        SET yGL3:0cm
        SET codeCounterGL3:0
        
        #Get spurce OU name
        CC "Core" GET_ATTR_VAL objid:(pOUid) attrname:"Name" as-string
        SET sSourceOUName:(val)

        ### GET ROLES INSIDE THE OU
        CC "AQL" EVAL_AQL_EXPRESSION expr:("({\"" + sSourceOUName + "\":\"OrganizationalUnit\"}<-\"Is inside\") OR ({\""+ sSourceOUName + "\":\"OrganizationalUnit\"}->\"Is inside\")") modelid:(VAL sCurrentModelId)
        
        SET uniContOids:(objids)

        #check if OU contains Roles
        FOR uniContid_i in:(uniContOids) {
            CC "Core" GET_CLASS_ID objid:(VAL uniContid_i)
            CC "Core" GET_CLASS_NAME classid:(classid)
    


            IF (classname = "Role") {
                CC "Core" GET_OBJ_NAME objid:(VAL uniContid_i)
                SET sRoleId:(VAL uniContid_i)
                SET sRoleName:(objname)

                ### GET OBJECTIVES INSIDE THE ROLE
                CC "AQL" EVAL_AQL_EXPRESSION expr:("({\"" + sRoleName + "\":\"Role\"}<-\"Is inside\") OR ({\""+ sRoleName + "\":\"Role\"}->\"Is inside\")") modelid:(VAL sCurrentModelId)
                
                SET roleContOids:(objids)
                

                
                #check unit contents classes
                FOR roleContid_i in:(roleContOids) {


                    CC "Core" GET_CLASS_ID objid:(VAL roleContid_i)
                    CC "Core" GET_CLASS_NAME classid:(classid)
                    IF (classname = "Objective") {
                        
                        SET sObjectiveId:(VAL roleContid_i)
                        
                        SET yGL3:(yGL3 + 3cm)
                        SET codeCounterGL3:(codeCounterGL3+1)


                        CC "Core" GET_OBJ_NAME objid:(sObjectiveId)
                        SET sObjectiveName:(objname)

                        CC "Core" GET_ATTR_VAL objid:(sObjectiveId) attrname:"Indicator" as-string
                        SET sObjectiveIndicatorName:(val)
                        
                        #Creates a communicative event (and its associated elements) to report the status of the objective
                        CREATE_REPORTING_EVENT roleId:(sRoleId) objecId:(sObjectiveId) ounitId:(pOUid) ypos:(yGL3) codeCounter:(codeCounterGL3) result:reportingEventId resultRoleActor:roleActorID resultOUActor:ouActorID 

                    
                        #Traceability:
                        ## From business to strategy
                        ### CE al objective que reporta
                        CC "Core" GET_CLASS_ID objid:(reportingEventId)
                        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Traced Objective"
                        CC "Core" ADD_INTERREF objid:(reportingEventId) attrid:(attrid) tobjid:(sObjectiveId) tmodelid:(sCurrentModelId)

                        ### Actores a sus units/roles
                        CC "Core" GET_CLASS_ID objid:(roleActorID)
                        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Traced Reporting Role"
                        CC "Core" ADD_INTERREF objid:(roleActorID) attrid:(attrid) tobjid:(sRoleId) tmodelid:(sCurrentModelId)

                        CC "Core" GET_CLASS_ID objid:(ouActorID)
                        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Traced Informed Organisation Unit"
                        CC "Core" ADD_INTERREF objid:(ouActorID) attrid:(attrid) tobjid:(pOUid) tmodelid:(sCurrentModelId)

                        ### Role a su CA ACtor
                        CC "Core" GET_CLASS_ID objid:(sRoleId)
                        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Traced Communicative Actor"
                        CC "Core" ADD_INTERREF objid:(sRoleId) attrid:(attrid) tobjid:(roleActorID) tmodelid:(sCurrentModelId)

                        ## de S a B
                        ### Objective to CE
                         CC "Core" GET_CLASS_ID objid:(sObjectiveId)
                        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Traced Communicative Event"
                        CC "Core" ADD_INTERREF objid:(sObjectiveId) attrid:(attrid) tobjid:(reportingEventId) tmodelid:(sCurrentModelId)

                    }
                }  

            }
        }    
    
    SET result:0
}

  PROCEDURE CREATE_REPORTING_EVENT roleId:integer objecId:integer ounitId:integer ypos:measure codeCounter:integer result:reference resultRoleActor:reference resultOUActor:reference {
            
    ####Position contants

    ### Traced element names:
    CC "Core" GET_OBJ_NAME objid:(objecId)
    SET sObjectiveName:(objname)

    ### Objectives Indicastor name, for short.
    CC "Core" GET_ATTR_VAL objid:(objecId) attrname:"Indicator" as-string
    SET sObjectiveIndicatorName:(val)
                        
    CC "Core" GET_OBJ_NAME objid:(roleId)
    SET sRoleName:(objname)

    CC "Core" GET_OBJ_NAME objid:(ounitId)
    SET sOUName:(objname)


    ### Get the Traced BP's of the source OU
    CC "Core" GET_INTERREF  objid:(ounitId) attrname:"Traced Business Process" index:0
    SET sOUBPModelId:(tmodelid)
    #CC "AdoScript" INFOBOX ("sOUBPModelId" + (STR sOUBPModelId))
    CC "Modeling" ACTIVATE_MODEL (sOUBPModelId)

    ### Create the communicative event

    CC "Core" GET_CLASS_ID classname:"CommunicativeEvent"
    SET sCANodeClassId:(classid)
    CC "Core" CREATE_OBJ modelid:(sOUBPModelId) classid:(sCANodeClassId) objname:("Report " + (sObjectiveIndicatorName) + " Status")
    SET sNewCEid:(objid)
    
    IF (ecode != 0 AND ecode != 52)
        {
            CC "AdoScript" INFOBOX "Error!\nModelgroup could not be created. Was the name you entered unique?"
        } 

    CC "Modeling" SET_OBJ_POS objid:(sNewCEid) x:(10.5cm) y:(ypos)
    CC "Core" SET_ATTR_VAL objid:(sNewCEid) attrname:"Code" val:("S2B-G3"+"-0"+(STR codeCounter)) ###S2B-GL2 ->"Generated by Stra2Bis transformaiton Guideline 2"
    
    
    ### Create the primary actor named after the role.
    CC "Core" GET_CLASS_ID classname:"CAActor"
    SET sActorClassId:(classid)
    
    #### Check if there are actors that reference the same Role
    CC "Core" GET_ATTR_ID classid:(sActorClassId) attrname:"Name"
    CC "Core" GET_ALL_OBJS_WITH_ATTR_VAL modelid:(sOUBPModelId) classid:(sActorClassId) id attrid:(attrid) val:(sRoleName)
    SET rActorRolesIds:(objids)

    #### Check if there are actors, use the existing actor as Primary Actor; else, create it.
        IF (rActorRolesIds != "") {
            SET sRoleActorId:(VAL rActorRolesIds)
        }
        ELSE {
            CC "Core" CREATE_OBJ modelid:(sOUBPModelId) classid:(sActorClassId) objname:(sRoleName)
            SET sRoleActorId:(objid)
        }
    

    CC "Modeling" SET_OBJ_POS objid:(sRoleActorId) x:(2cm) y:(ypos)
    

    ### Create the receiver actor named after the organisation unit
    #### Check if there are actors that reference the same Organisation Unit
    CC "Core" GET_ALL_OBJS_WITH_ATTR_VAL modelid:(sOUBPModelId) classid:(sActorClassId) id attrid:(attrid) val:(sOUName + " Agent")
    SET rActorOUIds:(objids)

    #### Check if there are actors, use the existing actor as Primary Actor; else, create it.

        IF (rActorOUIds != "") {

            SET sOUActorId:(VAL rActorOUIds)
        }
        ELSE {
            CC "Core" CREATE_OBJ modelid:(sOUBPModelId) classid:(sActorClassId) objname:(sOUName + " Agent")
            SET sOUActorId:(objid)
        }


    CC "Modeling" SET_OBJ_POS objid:(sOUActorId) x:(20cm) y:(ypos)

    
    ##### Receiver actor is the support actor of the CE
    CC "Core" GET_ATTR_ID classid:(sCANodeClassId) attrname:"SupportActor"
    CC "Core" ADD_INTERREF objid:(sNewCEid) attrid:(attrid) tobjid:(sOUActorId) tmodelid:(sCurrentModelId)
    
    ### Create the ingoing communicative event
    CC "Core" GET_CLASS_ID classname:"IngoingInteraction"
    SET sIngoingClassId:(classid)
    CC "Core" CREATE_CONNECTOR modelid:(sOUBPModelId) fromobjid:(sRoleActorId) toobjid:(sNewCEid) classid:(sIngoingClassId)
    SET sIngoingId:(objid)
    CC "Core" SET_ATTR_VAL objid:(sIngoingId) attrname:"Name" val:((sObjectiveIndicatorName) + " Status")
    
    ### Create the outgoing communicative event
    CC "Core" GET_CLASS_ID classname:"OutgoingInteraction"
    SET sOutgoingClassId:(classid)
    CC "Core" CREATE_CONNECTOR modelid:(sOUBPModelId) fromobjid:(sNewCEid) toobjid:(sOUActorId) classid:(sOutgoingClassId)
    SET sOutgoingId:(objid)
    CC "Core" SET_ATTR_VAL objid:(sOutgoingId) attrname:"Name" val:((sObjectiveIndicatorName) + " Status")
                
    CC "Modeling" REBUILD_DRAWING_AREA

    SET result:(sNewCEid)
    SET resultRoleActor:(sRoleActorId)
    SET resultOUActor:(sOUActorId)
  }
    
